"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.
"""

import os
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
from aiogram.filters.state import StateFilter
from telegram_bot.keyboards import main_menu, budget_menu, back_button
from telegram_bot.states import GiftBotStates
from gift_core.data_manager import DataManager
from gift_core.budget_manager import BudgetManager
from gift_core.exceptions import BudgetError

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ gifts.json –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
gifts_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "..", "gifts.json")

@router.message(Command(commands=["start"]))
async def start_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ –ù–æ–≤—ã–π –ì–æ–¥ üéÑ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

@router.message(lambda message: message.text == "–£–∫–∞–∑–∞—Ç—å –±—é–¥–∂–µ—Ç")
async def ask_for_budget(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–£–∫–∞–∑–∞—Ç—å –±—é–¥–∂–µ—Ç". –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞.
    """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±—é–¥–∂–µ—Ç–∞:", reply_markup=back_button)
    await state.set_state(GiftBotStates.waiting_for_budget)

@router.message(StateFilter(GiftBotStates.waiting_for_budget))
async def set_budget(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±—é–¥–∂–µ—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è.
    """
    try:
        budget = float(message.text)
        if budget <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=back_button)
        return

    await state.update_data(budget=budget)
    await message.answer(
        f"–í–∞—à –±—é–¥–∂–µ—Ç: {budget:.2f} —Ä—É–±.\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=budget_menu
    )
    await state.set_state(GiftBotStates.waiting_for_action)

@router.message(lambda message: message.text == "–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏", StateFilter(GiftBotStates.waiting_for_action))
async def get_gifts(message: types.Message, state: FSMContext):
    """
    –ü–æ–¥–±–∏—Ä–∞–µ—Ç –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_data = await state.get_data()
    budget = user_data.get("budget")

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–±–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤
        data_manager = DataManager(gifts_file_path)
        data_manager.load_gift_bank()
        budget_manager = BudgetManager(budget)
        gifts, remaining = budget_manager.select_gifts_within_budget(data_manager.get_all_gifts_shuffled())

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = "üéÅ –ü–æ–¥–æ–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–¥–∞—Ä–∫–∏:\n"
        for gift in gifts:
            response += f"  - {gift['name']} ({gift['price']} —Ä—É–±.)\n"
        response += f"\n–û—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: {remaining:.2f} —Ä—É–±."

        await message.answer(response, reply_markup=budget_menu)

    except BudgetError:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç.", reply_markup=budget_menu)

@router.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥". –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)
